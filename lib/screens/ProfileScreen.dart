import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../api_service.dart';
import 'transaction_screen.dart';

class ProfileScreen extends StatefulWidget {
  final Map<String, dynamic> user;

  const ProfileScreen({super.key, required this.user});

  @override
  _ProfileScreenState createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> {
  Map<String, dynamic>? _wallet;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _fetchWallet();
  }

  Future<void> _fetchWallet() async {
    if (widget.user['userId'] == null) {
      setState(() {
        _wallet = {'balance': 0, 'walletId': null, 'userId': null, 'createdAt': null};
        _isLoading = false;
      });
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")),
      );
      return;
    }

    print("üîπ –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è userId: ${widget.user['userId']}");
    setState(() => _isLoading = true);
    try {
      final wallet = await ApiService.getWallet(widget.user['userId']);
      setState(() {
        _wallet = wallet ?? {'balance': 0, 'walletId': null, 'userId': widget.user['userId'], 'createdAt': null};
        _isLoading = false;
      });
      print("üîπ –ö–æ—à–µ–ª—ë–∫ –∑–∞–≥—Ä—É–∂–µ–Ω: $_wallet");
    } catch (e) {
      setState(() {
        _isLoading = false;
        _wallet = {'balance': 0, 'walletId': null, 'userId': widget.user['userId'], 'createdAt': null};
      });
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: $e")),
      );
      print("üîπ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: $e");
    }
  }

  Future<void> _deposit(BuildContext context) async {
    final userId = widget.user['userId'];
    if (userId == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")),
      );
      return;
    }

    final amountController = TextEditingController();
    String? selectedPaymentMethod;

    await showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫"),
        content: StatefulBuilder(
          builder: (context, setDialogState) => Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: amountController,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(labelText: "–°—É–º–º–∞ (—Ç–≥)"),
                inputFormatters: [FilteringTextInputFormatter.digitsOnly],
              ),
              const SizedBox(height: 16),
              DropdownButton<String>(
                hint: const Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"),
                value: selectedPaymentMethod,
                isExpanded: true,
                items: const [
                  DropdownMenuItem(value: "card", child: Text("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞")),
                  DropdownMenuItem(value: "mobile", child: Text("–ú–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç—ë–∂")),
                ],
                onChanged: (value) {
                  setDialogState(() => selectedPaymentMethod = value);
                },
              ),
              if (selectedPaymentMethod == "card") ...[
                const SizedBox(height: 16),
                TextField(
                  keyboardType: TextInputType.number,
                  maxLength: 16,
                  decoration: const InputDecoration(labelText: "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"),
                  inputFormatters: [
                    FilteringTextInputFormatter.digitsOnly,
                    LengthLimitingTextInputFormatter(16),
                  ],
                ),
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        keyboardType: TextInputType.number,
                        maxLength: 5,
                        decoration: const InputDecoration(labelText: "MM/–ì–ì"),
                        inputFormatters: [ExpiryDateInputFormatter()],
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        keyboardType: TextInputType.number,
                        maxLength: 3,
                        decoration: const InputDecoration(labelText: "CVV"),
                        inputFormatters: [
                          FilteringTextInputFormatter.digitsOnly,
                          LengthLimitingTextInputFormatter(3),
                        ],
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(dialogContext),
            child: const Text("–û—Ç–º–µ–Ω–∞"),
          ),
          TextButton(
            onPressed: () async {
              final amount = double.tryParse(amountController.text);
              if (amount == null || amount <= 0) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É")),
                );
                return;
              }
              if (selectedPaymentMethod == null) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã")),
                );
                return;
              }

              Navigator.pop(dialogContext);
              showDialog(
                context: context,
                barrierDismissible: false,
                builder: (context) => const AlertDialog(
                  content: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(height: 16),
                      Text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞..."),
                    ],
                  ),
                ),
              );

              try {
                final result = await ApiService.depositWallet(userId, amount);
                Navigator.pop(context);
                if (result != null) {
                  setState(() {
                    _wallet = {
                      'walletId': result['walletId'] ?? _wallet?['walletId'],
                      'userId': userId,
                      'balance': result['balance'] ?? (_wallet?['balance'] ?? 0) + amount,
                      'createdAt': result['createdAt'] ?? _wallet?['createdAt'],
                    };
                  });
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text("–ö–æ—à–µ–ª—ë–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ $amount —Ç–≥")),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")),
                  );
                }
              } catch (e) {
                Navigator.pop(context);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text("–û—à–∏–±–∫–∞: $e")),
                );
              }
            },
            child: const Text("–û–ø–ª–∞—Ç–∏—Ç—å"),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Container(
        margin: const EdgeInsets.only(top: 20),
        height: MediaQuery.of(context).size.height,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(35),
            topRight: Radius.circular(35),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 15,
              spreadRadius: 2,
            ),
          ],
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.symmetric(vertical: 10),
                  child: Text(
                    "–ë–∞–ª–∞–Ω—Å: ${_wallet?['balance'] ?? 0} —Ç–≥",
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF24DA88),
                    ),
                  ),
                ),
                _buildButton(context, Icons.account_balance_wallet, "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫", () => _deposit(context)),
                _buildButton(context, Icons.history, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", () {
                  if (widget.user['userId'] == null) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")),
                    );
                    return;
                  }
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => TransactionScreen(userId: widget.user['userId']),
                    ),
                  );
                }),
                _buildButton(context, Icons.settings, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const SettingsScreen()),
                  );
                }),
                _buildButton(context, Icons.location_city, "–ú–æ–π –≥–æ—Ä–æ–¥", () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const CityScreen()),
                  );
                }),
                _buildButton(context, Icons.info, "–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const AboutScreen()),
                  );
                }),
                _buildButton(context, Icons.support_agent, "–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏", () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => const SupportScreen()),
                  );
                }),
                const SizedBox(height: 140),
                Center(
                  child: Container(
                    decoration: BoxDecoration(
                      boxShadow: [
                        BoxShadow(
                          color: const Color(0xFF24DA88).withOpacity(0.6),
                          blurRadius: 30,
                          spreadRadius: 5,
                        ),
                      ],
                      borderRadius: BorderRadius.circular(30),
                    ),
                    child: ElevatedButton.icon(
                      onPressed: () {},
                      icon: const Icon(Icons.share, color: Colors.white),
                      label: const Text(
                        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏",
                        style: TextStyle(fontSize: 22, color: Colors.white),
                      ),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF24DA88),
                        padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 45),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                        elevation: 0,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildButton(BuildContext context, IconData icon, String text, VoidCallback onTap) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 15),
      child: Container(
        decoration: BoxDecoration(
          color: const Color(0xFFE6F5EC),
          borderRadius: BorderRadius.circular(40),
        ),
        child: ListTile(
          leading: Icon(icon, color: const Color(0xFF24DA88)),
          title: Text(text, style: const TextStyle(fontSize: 18)),
          trailing: const Icon(Icons.arrow_forward_ios, size: 22, color: Colors.grey),
          onTap: onTap,
        ),
      ),
    );
  }
}

class ExpiryDateInputFormatter extends TextInputFormatter {
  @override
  TextEditingValue formatEditUpdate(TextEditingValue oldValue, TextEditingValue newValue) {
    String newText = newValue.text.replaceAll(RegExp(r'[^0-9]'), '');
    String formattedText = '';
    if (newText.isNotEmpty) {
      if (newText.length <= 2) {
        formattedText = newText;
      } else {
        String month = newText.substring(0, 2);
        String year = newText.substring(2, newText.length.clamp(2, 4));
        formattedText = '$month/$year';
      }
    }
    return TextEditingValue(
      text: formattedText,
      selection: TextSelection.collapsed(offset: formattedText.length),
    );
  }
}

bool isValidExpiryDate(String input) {
  if (!RegExp(r'^\d{2}/\d{2}$').hasMatch(input)) return false;
  try {
    final parts = input.split('/');
    final month = int.parse(parts[0]);
    final year = int.parse(parts[1]);
    if (month < 1 || month > 12) return false;
    final currentYear = DateTime.now().year % 100;
    if (year < currentYear || year > 99) return false;
    return true;
  } catch (e) {
    return false;
  }
}

class AboutScreen extends StatelessWidget {
  const AboutScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"),
        backgroundColor: const Color(0xFF24DA88),
        foregroundColor: Colors.white,
      ),
      body: Container(
        margin: const EdgeInsets.only(top: 20),
        height: MediaQuery.of(context).size.height,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(35),
            topRight: Radius.circular(35),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 15,
              spreadRadius: 2,
            ),
          ],
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "–û –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                const Text(
                  "–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, —á—Ç–æ–±—ã —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω—è–π—Ç–µ –∫–æ—à–µ–ª—ë–∫, —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É —É–¥–æ–±—Å—Ç–≤—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                  style: TextStyle(fontSize: 16, color: Colors.grey),
                ),
                const SizedBox(height: 16),
                const Text(
                  "–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1.0.0",
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 8),
                const Text(
                  "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: xAI Team",
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 8),
                const Text(
                  "–ö–æ–Ω—Ç–∞–∫—Ç—ã: support@xai.com",
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(height: 24),
                Center(
                  child: ElevatedButton(
                    onPressed: () {},
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF24DA88),
                      padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 45),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                    ),
                    child: const Text(
                      "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SupportScreen extends StatefulWidget {
  const SupportScreen({super.key});

  @override
  _SupportScreenState createState() => _SupportScreenState();
}

class _SupportScreenState extends State<SupportScreen> {
  final _messageController = TextEditingController();
  String? _selectedIssue;

  @override
  void dispose() {
    _messageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"),
        backgroundColor: const Color(0xFF24DA88),
        foregroundColor: Colors.white,
      ),
      body: Container(
        margin: const EdgeInsets.only(top: 20),
        height: MediaQuery.of(context).size.height,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(35),
            topRight: Radius.circular(35),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 15,
              spreadRadius: 2,
            ),
          ],
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                DropdownButton<String>(
                  hint: const Text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É"),
                  value: _selectedIssue,
                  isExpanded: true,
                  items: const [
                    DropdownMenuItem(value: "payment", child: Text("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º")),
                    DropdownMenuItem(value: "account", child: Text("–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º")),
                    DropdownMenuItem(value: "other", child: Text("–î—Ä—É–≥–æ–µ")),
                  ],
                  onChanged: (value) => setState(() => _selectedIssue = value),
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: _messageController,
                  maxLines: 5,
                  decoration: const InputDecoration(
                    labelText: "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É",
                    border: OutlineInputBorder(),
                  ),
                ),
                const SizedBox(height: 24),
                Center(
                  child: ElevatedButton(
                    onPressed: () {
                      if (_selectedIssue == null || _messageController.text.isEmpty) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")),
                        );
                        return;
                      }
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")),
                      );
                      _messageController.clear();
                      setState(() => _selectedIssue = null);
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF24DA88),
                      padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 45),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                    ),
                    child: const Text(
                      "–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class CityScreen extends StatefulWidget {
  const CityScreen({super.key});

  @override
  _CityScreenState createState() => _CityScreenState();
}

class _CityScreenState extends State<CityScreen> {
  String? _selectedCity;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("–ú–æ–π –≥–æ—Ä–æ–¥"),
        backgroundColor: const Color(0xFF24DA88),
        foregroundColor: Colors.white,
      ),
      body: Container(
        margin: const EdgeInsets.only(top: 20),
        height: MediaQuery.of(context).size.height,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(35),
            topRight: Radius.circular(35),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 15,
              spreadRadius: 2,
            ),
          ],
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                DropdownButton<String>(
                  hint: const Text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥"),
                  value: _selectedCity,
                  isExpanded: true,
                  items: const [
                    DropdownMenuItem(value: "almaty", child: Text("–ê–ª–º–∞—Ç—ã")),
                    DropdownMenuItem(value: "astana", child: Text("–ê—Å—Ç–∞–Ω–∞")),
                    DropdownMenuItem(value: "shymkent", child: Text("–®—ã–º–∫–µ–Ω—Ç")),
                    DropdownMenuItem(value: "karaganda", child: Text("–ö–∞—Ä–∞–≥–∞–Ω–¥–∞")),
                  ],
                  onChanged: (value) => setState(() => _selectedCity = value),
                ),
                const SizedBox(height: 24),
                Center(
                  child: ElevatedButton(
                    onPressed: () {
                      if (_selectedCity == null) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(content: Text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")),
                        );
                        return;
                      }
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text("–ì–æ—Ä–æ–¥ $_selectedCity —Å–æ—Ö—Ä–∞–Ω—ë–Ω")),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF24DA88),
                      padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 45),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                    ),
                    child: const Text(
                      "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({super.key});

  @override
  _SettingsScreenState createState() => _SettingsScreenState();
}

class _SettingsScreenState extends State<SettingsScreen> {
  bool _notificationsEnabled = true;
  bool _darkMode = false;
  String? _selectedLanguage;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        backgroundColor: const Color(0xFF24DA88),
        foregroundColor: Colors.white,
      ),
      body: Container(
        margin: const EdgeInsets.only(top: 20),
        height: MediaQuery.of(context).size.height,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(35),
            topRight: Radius.circular(35),
          ),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.05),
              blurRadius: 15,
              spreadRadius: 2,
            ),
          ],
        ),
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
                  style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 16),
                SwitchListTile(
                  title: const Text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", style: TextStyle(fontSize: 18)),
                  value: _notificationsEnabled,
                  activeColor: const Color(0xFF24DA88),
                  onChanged: (value) => setState(() => _notificationsEnabled = value),
                ),
                SwitchListTile(
                  title: const Text("–¢—ë–º–Ω–∞—è —Ç–µ–º–∞", style: TextStyle(fontSize: 18)),
                  value: _darkMode,
                  activeColor: const Color(0xFF24DA88),
                  onChanged: (value) => setState(() => _darkMode = value),
                ),
                const SizedBox(height: 16),
                DropdownButton<String>(
                  hint: const Text("–Ø–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
                  value: _selectedLanguage,
                  isExpanded: true,
                  items: const [
                    DropdownMenuItem(value: "ru", child: Text("–†—É—Å—Å–∫–∏–π")),
                    DropdownMenuItem(value: "kz", child: Text("“ö–∞–∑–∞“õ—à–∞")),
                    DropdownMenuItem(value: "en", child: Text("English")),
                  ],
                  onChanged: (value) => setState(() => _selectedLanguage = value),
                ),
                const SizedBox(height: 24),
                Center(
                  child: ElevatedButton(
                    onPressed: () {
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(content: Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF24DA88),
                      padding: const EdgeInsets.symmetric(vertical: 15, horizontal: 45),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                    ),
                    child: const Text(
                      "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
                      style: TextStyle(fontSize: 18, color: Colors.white),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}